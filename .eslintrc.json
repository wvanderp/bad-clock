{
    "root": true,
    "env": {
        "browser": true,
        "es6": true
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "settings": {
        "import/parsers": {
            "@typescript-eslint/parser": [
                ".ts",
                ".tsx"
            ]
        },
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true
            },
            "node": {
                "extensions": [
                    ".js",
                    ".jsx",
                    ".ts",
                    ".tsx"
                ],
                "moduleDirectory": [
                    "node_modules",
                    "src/"
                ]
            }
        },
        "polyfills": [
            "Number.parseInt"
        ],
        "jsdoc": {
            "mode": "typescript"
        },
        "react": {
            "version": "detect"
        }
    },
    "plugins": [
        "jsx-a11y",
        "react",
        "sonarjs",
        "@typescript-eslint",
        "unicorn"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:jsx-a11y/recommended",
        "plugin:react/recommended",
        "plugin:sonarjs/recommended",
        "plugin:unicorn/recommended",
        "plugin:import/typescript"
    ],
    "overrides": [
        {
            "files": [
                "*Spec.ts",
                "*Spec.xts"
            ],
            "rules": {
                // Mocha doesnâ€™t like it when we use arrows
                // https://mochajs.org/#arrow-functions
                "prefer-arrow-callback": "off",
                "func-names": "off",
                // There are no function calls in mocha so this rule thinks the file does nothing. But mocha calls the file
                "no-unused-expressions": "off",
                // Any is used to mock some vars and it gives warnings about it that are unwanted
                "@typescript-eslint/no-explicit-any": "off"
            }
        }
    ],
    "rules": {
        // Git fixes this issue by automagically change the brake line type when pushing the local branches
        "linebreak-style": "off",
        "unicorn/prevent-abbreviations": [
            "error",
            {
                "replacements": {
                    "q": {
                        "query": true
                    },
                    "props": {
                        "properties": false
                    },
                    "params": {
                        "parameters": false
                    },
                    "pkg": {
                        "package": false
                    }
                }
            }
        ],
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1
            }
        ],
        "unicorn/filename-case": [
            "error",
            {
                "cases": {
                    "camelCase": true,
                    "pascalCase": true
                }
            }
        ],
        "quotes": [
            "error",
            "double"
        ]
    }
}
